Сборка и запуск простой проги на Go

сoздать и инициализировать проект:
$ mkdir 401_hello
$ cd 401_hello
$ go mod init 401_hello

создать файл hello.go с main:
package main
import (
	....
	"401_hello/greeting"
)
...

создать файл с пакетом greeting:
401_hello/greeting/greeting.go
package greeting
...

$ go mod tidy (если не в паралельных папках, или с gita тянем)
$ go run hello.go

-------------------------------------
Команда go install также сохраняет откомпилированные бинарные версии исполняемых программ,
но в четко определенном и легкодоступном месте: в каталоге bin вашей рабочей области Go. Просто передайте go install имя каталога из src, содержащего код исполняемой программы (то есть файлов .go, начинающихся с package main). Программа будет откомпилирована, а исполняемый файл будет сохранен в стандартном каталоге.
инсталировать:
$ go install example/user/hello
в рабочей директории можно
$ go install .
$ go install

на етом этапе уже можно скомпилировать и вызвать
$ go build hello.go
$ ./hello

добавить в путь и вызвать
$ export PATH=$PATH:$(dirname $(go list -f '{{.Target}}' .))
$ hello

-------------------------------------------------
go get, которая может автоматически загружать и устанавливать пакеты
go get github.com/headfirstgo/greeting, при етом будет воссоздана стуктура каталогов

Пример 510
так как проект подключен к GOPATH
из любой директории
go install 510_github.com/headfirstgo/average
go install 710_github.com/excavator/count/
average появилось в папке bin
------------------------------------------------
Go использует три подкаталога в рабочей области:
в каталоге bin хранятся откомпилированные исполняемые программы, в каталоге pkg — откомпилированный код пакетов, а в каталоге src — исходный код Go.

===========================================================
Go включает пакет testing, который может использоваться для написания автотестов, и команду go test, предназначенную для выполнения этих тестов.
часть _test.go в названии играет важную роль; команда go test ищет файлы с этим суффиксом
!! при вызове важно обращаться к папке с тестом - go test 1400_testes/arithmetic

Флаг -v — означает расширенный вывод («verbose»).
go test 1410_github.com/KVexcavator/prose -v
Флаг -run , если указать после флага часть имени функции (или полное имя), будут выполнены только тестовые функции, имена которых содержат заданную вами строку.
go test 1410_github.com/KVexcavator/prose -v -run Two
