пакет testing, может использоваться для написания автотестов, команда go test, предназначена  для выполнения этих тестов.
часть _test.go в названии играет важную роль; команда go test ищет файлы с этим суффиксом
!! при вызове важно обращаться к папке с тестом - go test 1400_testes/arithmetic

Флаг -v — означает расширенный вывод («verbose»).
go test 1410_github.com/KVexcavator/prose -v
Флаг -run , если указать после флага часть имени функции (или полное имя), будут выполнены только тестовые функции, имена которых содержат заданную вами строку.
go test 1410_github.com/KVexcavator/prose -v -run Two
--------------------------------------------------------
Код в тестовом файле состоит из обычных функций Go, но для работы с командой go test в нем должны соблюдаться некоторые соглашения:
• Ваши тесты не обязаны принадлежать тому же пакету, что и тестируемый код, но это необходимо, если вы хотите обращаться к неэкспортируемым типам или функциям из пакета.
• В тестах используется тип из пакета testing, поэтому этот пакет должен импортироваться в начале каждого тестового файла.
• Имена тестовых функций должны начинаться с Test. (Остаток имени может быть любым, но имена должны начинаться с буквы верхнего регистра.)
• Тестовые функции должны получать один параметр: указатель на значение testing.T.
• Чтобы сообщить о том, что тест не проходит, вы вызываете различные методы (такие, как Error) для значения testing.T. Многие методы получают строку с сообщением, которое объясняет, почему тест не проходит: t.Error("didn't match expected value")

В отличие от Error, Errorf получает строку с глаголами форматирования, как и функции fmt.Printf и fmt.Sprintf.
=============================================
Чтобы получить оценку охвата тестами:
$ go test -cover
Более полную информацию об инструменте cover найти в блоге языка Go: http://blog.golang.org/cover
=============================================
Пример hello_test:
---
package main
import "fmt"
func getName() string {
  return "World!"
}
func main() {
  name := getName()
  fmt.Println("Hello ", name)
}
----------------------------
hello_test.go файл, закустить go test
тестируем функцию getName:
---
package main
import "testing"
// Инструмент запуска тестов вызывает функции, начинающиеся с Test
func TestName(t *testing.T) {
  name := getName()
  // Отчет об ошибке, если тест не пройден
  if name != "World!" {
    t.Error("Response from getName is unexpected value")
  }
}
========================================

Пример 1410_github.com/KVexcavator/prose
========================================
Среда Go включает встроенный инструмент форматирования, поддерживающий большинство рекомендаций по оформлению. Достаточно запустить команду go fmt в корневом каталоге пакета, чтобы Go обошел все файлы .go в пакете и привел их в соответствие с каноническим стилем. В команде go fmt можно дополнительно указать путь к пакету или ./... (для обхода всех подкаталогов).
========================================
