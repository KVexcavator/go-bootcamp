net/http используется для соединения с сайтом и загрузки веб-страницы всего несколькими вызовами функций
Пакет net/http также включает небольшой веб-сервер.
http.HandleFunc (путь, обрабатчик) ввызвать обработсик при совпадении пути
http.ListenAndServe (хост:порт, nil) запускает сервер
* Значение nil во втором аргументе означает, что запросы будут обрабатываться
с использованием функций, заданных при помощи HandleFunc.
http.ResponseWriter используется для записи данных в ответ браузера
http.Request  запрос браузера
перенаправить и возвратить статус
http.Redirect(writer, request, "/guestbook", http.StatusFound)


URL-адрес нужного сайта передается функции http.Get. Она возвращает объект http.Response, а также любые обнаруженные ошибки.
Объект http.Response представляет собой структуру с полем Body, представляющим содержимое
страницы.
Body поддерживает интерфейс ReadCloser уровня пакета, это означает, что оно содержит
метод Read (для чтения данных страницы) и метод Close для освобождения сетевого подключения при завершении работы.

Этот пример демонстрирует вывод тела простого HTTP-запроса GET:
=================================================
package main
import (
  "fmt"
  "io/ioutil"
  "net/http"
  )
func main() {
  // Создание HTTP-запроса GET
  resp, _ := http.Get("http://example.com/")
  // Чтение тела ответа
  body, _ := ioutil.ReadAll(resp.Body)
  // Вывод тела в виде строки
  fmt.Println(string(body))
  // акрытие соединения
  resp.Body.Close()З
}
==================================================
Пример Вывод Hello World через веб-сервер:
----------
package main
import (
    "fmt"
    "net/http"
  )
// Обработка HTTP-запроса
func hello(res http.ResponseWriter, req *http.Request) {
  fmt.Fprint(res, "Hello, my name is Inigo Montoya")
}
// Основная логика приложения
func main() {
  http.HandleFunc("/", hello)
  http.ListenAndServe("localhost:4000", nil)
}
=======================================
